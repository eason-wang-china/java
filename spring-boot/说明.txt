第一步：启动自动配置
   启动类增加：@SpringBootApplication()，自动扫描这个类所在的包及以下包的Bean，这个注解包含了之前 spring4 使用的 @ComponentScan @Configuration 

第二步：配置 application.properties
1、 对默认配置的值进行修改
2、 当然也可以定义一些自己需要的属性，在类里面通过 @Value 引用

第三步：各种配置文件的导入（不是必需的）
1、 @PropertySource 加载指定的配置文件
2、 @ConfigurationProperties(prefix = "project") 在某个类中引用，加载所有配置文件中指定前缀的属性
3、 @ImportResource(locations = {"classpath:config/beans.xml"}) // 如果需要通过配置文件配置时，可以导入配置文件，目前已经不再推荐这种做法

第四步：实现配置类（不是必需的）
    在类上加 @Configuration 做为配置类，实现 WebMvcConfigurer 接口实现高级配置功能

第五步：配置日志文件
1、 首先通过 application.properties 配置，可配置日志文件位置 和 日志级别，如果不能满足需求，使用传统的日志配置方式
2、 日志服务在 ApplicationContext 创建前就初始化了，不是必须通过 Spring 配置文件控制，传统的配置文件依然可以
3、 Spring Boot 推荐使用后缀为-spring的日志配置（如logback-spring.xml），Spring Boot可以为它添加一些特有的配置项
4、 参考：https://blog.csdn.net/flysun3344/article/details/80555746

第六步：配置 Servlet 组件
1、 @ServletComponentScan 注解会通知容器扫描 @WebServlet、 @WebFilter、 @WebListener 并将该类实例化
2、 这些组件中需要引用的 Bean 直接注入就可以



注：
1、 查看配置信息，进入 spring-boot-autoconfigure-*.jar
